def movie_quotes(name):
    """Возвращает цитаты известных персонажей из фильмов

    >>> movie_quotes('Элли')
    'Тото , у меня такое ощущение, что мы не в Канзасе!'

    >>> movie_quotes('Шерлок')
    'Элементарно, Ватсон!'

    >>> movie_quotes('Дарт Вейдер')
    'Люк, я — твой отец.'

    >>> movie_quotes('Леонид Тощев')
    'Персонаж пока не известен миллионам.'
    """
    quotes = {
        'Элли': 'Тото, у меня такое ощущение, что мы не в Канзасе!',
        'Шерлок': 'Элементарно, Ватсон!',
        'Дарт Вейдер': 'Люк, я — твой отец.',
        'Thomas A. Anderson': 'Меня. Зовут. Нео!',
        'Алиса Плезенс Лидделл': 'Всё чудесатее и чудесатее!',
    }
    return quotes.get(name, 'Персонаж пока не известен миллионам.') 


if __name__ == '__main__':
    import doctest
    doctest.testmod()

# Утверждаем, что если в movie_quotes() передать 'Шерлок' -
# функция вернёт 'Элементарно, Ватсон!'.
assert movie_quotes('Шерлок') == 'Элементарно, Ватсон!', (
   "movie_quotes('Шерлок') не вернул ожидаемый результат!")

# Утверждаем, что если в movie_quotes() передать 'Thomas A. Anderson' -
# функция вернёт 'Меня зовут Нео!'.
assert movie_quotes('Thomas A. Anderson') == 'Меня. Зовут. Нео!', (
    "movie_quotes('Thomas A. Anderson') не вернул ожидаемый результат!")

# Утверждаем, что если в movie_quotes передать 'Алиса Плезенс Лидделл' -
# функция вернёт 'Всё чудесатее и чудесатее!'.
expected_answer = 'Всё чудесатее и чудесатее!'
assert movie_quotes('Алиса Плезенс Лидделл') == expected_answer, (
    "movie_quotes('Алиса Плезенс Лидделл') не вернул ожидаемый результат!") 


# Код продолжит выполняться, сообщение не будет выведено
assert 1 == 1, 'Хьюстон, у нас проблемы'

# В этом примере утверждение (первый аргумент) - False
assert 2 + 2 == 5, 'Хьюстон, у нас проблемы'


x = 3
# correct way to write multiline comments
assert 2 + x == 4, ('Очень длинная строка, в которой многословно '
                    'и с лирическими отступлениями описывается, '
                    'какой именно тест провален.')
